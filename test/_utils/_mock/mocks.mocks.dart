// Mocks generated by Mockito 5.4.4 from annotations
// in movie_mvvm/test/_utils/_mock/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fpdart/fpdart.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:movie_mvvm/core/errors/errors.dart' as _i7;
import 'package:movie_mvvm/core/http_client/api_response.dart' as _i2;
import 'package:movie_mvvm/core/http_client/http_client.dart' as _i3;
import 'package:movie_mvvm/data/remote/movies.dart' as _i10;
import 'package:movie_mvvm/model/movie.dart' as _i8;
import 'package:movie_mvvm/repository/movie_repository.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiResponse_0 extends _i1.SmartFake implements _i2.ApiResponse {
  _FakeApiResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DioClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioClient extends _i1.Mock implements _i3.DioClient {
  MockDioClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ApiResponse> get(
    String? url, {
    Map<String, dynamic>? headers,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse>.value(_FakeApiResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse>);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i5.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.Either<_i7.Failure, List<_i8.Movie>>> getTrendTodayMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrendTodayMovies,
          [],
        ),
        returnValue: _i4.Future<_i6.Either<_i7.Failure, List<_i8.Movie>>>.value(
            _i9.dummyValue<_i6.Either<_i7.Failure, List<_i8.Movie>>>(
          this,
          Invocation.method(
            #getTrendTodayMovies,
            [],
          ),
        )),
      ) as _i4.Future<_i6.Either<_i7.Failure, List<_i8.Movie>>>);
}

/// A class which mocks [RemoteMovieDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteMovieDataSource extends _i1.Mock
    implements _i10.RemoteMovieDataSource {
  MockRemoteMovieDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i8.Movie>> getTrendTodayMovies() => (super.noSuchMethod(
        Invocation.method(
          #getTrendTodayMovies,
          [],
        ),
        returnValue: _i4.Future<List<_i8.Movie>>.value(<_i8.Movie>[]),
      ) as _i4.Future<List<_i8.Movie>>);
}
